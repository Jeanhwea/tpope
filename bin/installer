#!/bin/sh
# $Id$
# -*- sh -*- vim:set ft=sh sw=4 sts=4:

# This does various tasks involved with moving in (such as setting up a crontab
# and changing my login shell).

[ -z "$PATH" ] && PATH="$HOME/bin:/usr/local/bin:/usr/bin:/bin"
case "$PATH" in
    "$HOME/bin:"*) ;;
    *) PATH="$HOME/bin:$PATH" ;;
esac
hostname="`hostname|sed -e 's/[.].*//'`"
inpath() { [ -x "`which "$1" 2>/dev/null`" ]; }

if [ "x$1" = "x--cron" -o "x$1" = "x--quiet" ]; then
    quiet=1; exec >/dev/null; shift
fi

if [ ! -f "$HOME/. tpope" ]; then
    case "`id`" in
	'uid=1000(tpope)'*) touch "$HOME/.install-root" ;;
	*) touch "$HOME/.autodl" ;;
    esac
fi

if [ "x$1" = "x--root-only" -a -n "$2" ]; then
	u="$2"
	PATH="/usr/local/sbin:/usr/sbin:/sbin:$PATH"
	for group in adm src dip dialout floppy cdrom video audio disk camera; do
	    line="`getent group $group 2>/dev/null || grep ^$group: /etc/group`"
	    case "$line" in
		'') ;;
		*"$u"*) ;;
		*) adduser "$u" $group >/dev/null 2>&1 && didgroup=1 ;;
	    esac
	done
	[ -z "$didgroup" ] || echo "Added to groups."
	if [ -d /root/Trash -a ! -f /root/.libtrash ]; then
	    ln -s "$HOME/.libtrash" /root/.libtrash
	    rm -rf /root/Trash
	    didroot=1
	fi
	[ -z "$didroot" ] || echo "Did root related tasks."
	[ ! -f "$HOME/.install-root" ] || touch "$HOME/.install-root"
	exit 0
fi

if [ "$1" = "--root" -o "$1" = "--root-only" ] && [ -n "$LOGNAME" ]; then
    # ugh, how complicated
    if [ -n "$quiet" -o ! -t 0 ]; then
	if inpath sudo && sudo -l >/dev/null 2>&1; then
	    sudo -p '' -S "$HOME/bin/installer" --root-only $LOGNAME </dev/null 2>/dev/null
	fi
    elif inpath sudo; then
	if sudo -l >/dev/null 2>&1; then
	    sudo "$HOME/bin/installer" --root-only $LOGNAME
	else
	    if [ -f /etc/sudoers ]; then
		su -c "echo $LOGNAME 'ALL=(ALL)' ALL >> /etc/sudoers"
		echo "Adding to sudoers."
		if sudo -l >/dev/null 2>&1; then
		    sudo "$HOME/bin/installer" --root-only $LOGNAME
		else
		    su -c "$HOME/bin/installer --root-only $LOGNAME"
		fi
	    else
		su -c "$HOME/bin/installer --root-only $LOGNAME"
	    fi
	fi
    else
	su -c "$HOME/bin/installer --root-only $LOGNAME"
    fi
fi

if [ "x$1" = "x--root-only" ]; then
    exit
fi

if [ ! -f "$HOME/. tpope" -o -r "$HOME/. tpope" ]; then
    [ -f "$HOME/. tpope" ] || hidden=1
    touch "$HOME/. tpope"
    chmod 0000 "$HOME/. tpope"
fi
if [ ! -f "$HOME/.hushlogin" ]; then
    touch "$HOME/.hushlogin"
    hidden=1
fi
if [ ! -f "$HOME/.imaprc" ]; then
    cat > "$HOME/.imaprc" <<-EOF
	I accept the risk
	set mail-subdirectory Mail
	EOF
    hidden=1
fi
if inpath cvs && [ ! -f "$HOME/.cvsrc" ]; then
    cat > "$HOME/.cvsrc" <<-EOF
	# ~/.cvsrc
	cvs -z2
	update -dP
	tag -c
	diff -uN
	rdiff -u
	release -d
	EOF
    hidden=1
fi
if inpath mplayer && [ ! -d "$HOME/.mplayer" ]; then
    mkdir "$HOME/.mplayer"
    mkfifo "$HOME/.mplayer/mplayer"
    cat > "$HOME/.mplayer/config" <<-EOF
	# ~/.mplayer/config
	vo=xv,x11,fb,aa
	alang=en
	slang=en
	framedrop=yes
	input=file=$HOME/.mplayer/mplayer
	EOF
    hidden=1
fi
if inpath dcop && [ ! -f "$HOME/.kde/share/config/kdeglobals" ]; then
    mkdir -p "$HOME/.kde/share/config"
    cat > "$HOME/.kde/share/config/kdeglobals" <<-EOF
	[General]
	TerminalApplication=\$HOME/bin/x-terminal-emulator
	
	[Paths]
	Trash=\$HOME/.trash/
	EOF
    hidden=1
fi
if inpath lynx && [ ! -f "$HOME/.lynx.cfg" ]; then
    globalcfg="`lynx -dump lynxcfg: 2>/dev/null|sed -ne '/^References/,$p'|grep 'file://localhost/'|tail -1|sed -e 's,.*file://localhost,,'`"
    [ -n "$globalcfg" ] || \
    for f in /usr/local/lib/lynx.cfg /usr/local/etc/lynx.cfg /etc/lynx.cfg; do
	[ ! -f "$f" ] || globalcfg="$f"
    done
    cat > "$HOME/.lynx.cfg" <<-EOF
	# ~/.lynx.cfg
	INCLUDE:$globalcfg
	ACCEPT_ALL_COOKIES:TRUE
	DEFAULT_EDITOR:sensible-editor
	DEFAULT_USER_MODE:INTERMEDIATE
	EMACS_KEYS_ALWAYS_ON:TRUE
	EXTERNAL:http:sensible-browser %s:TRUE
	EXTERNAL:file:sensible-browser %s:TRUE
	SAVE_SPACE:~/dl
	STARTFILE:http://www.google.com/
	EOF
    hidden=1
fi
if inpath elinks && [ ! -d "$HOME/.elinks" ]; then
    mkdir "$HOME/.elinks"
    cat > "$HOME/.elinks/elinks.conf" <<-EOF
	# ~/.elinks/elinks.conf
	set terminal.xterm.colors = 1
	set terminal.Eterm.colors = 1
	set terminal.screen.colors = 1
	set terminal.screen.block_cursor = 1
	set terminal.screen.underline = 1
	set terminal.screen.type = 1
	set document.colors.use_document_colors = 1
	set document.colors.vlink = "fuchsia"
	set document.download.directory = "~/dl"
	set document.plain.display_links = 1
	EOF
    hidden=1
elif inpath links && [ ! -d "$HOME/.links" -a ! -d "$HOME/.elinks" ]; then
    mkdir "$HOME/.links"
    cat > "$HOME/.links/links.cfg" <<-EOF
	# ~/.links/links.cfg
	terminal "xterm" 0 0 1 us-ascii
	terminal "Eterm" 0 0 1 us-ascii
	terminal "screen" 0 0 1 us-ascii
	download_dir "~/dl"
EOF
    hidden=1
fi
if inpath konqueror && [ ! -f "$HOME/.kde/share/config/konquerorrc" ]; then
    mkdir -p "$HOME/.kde/share/config"
    cat > "$HOME/.kde/share/config/konquerorrc" <<-EOF
	[FMSettings]
	AlwaysNewWin=false
	AlwaysTabbedMode=true
	HomeURL=http://www.google.com/
	KonquerorTabforExternalURL=true
	MMBOpensTab=true
	NewTabsInFront=false
	OpenAfterCurrentPage=true
	PopupsWithinTabs=true
	TabCloseActivatePrevious=true
	
	[KonqMainWindow Toolbar bookmarkToolBar]
	IconSize=16
	IconText=IconTextRight
	EOF
    hidden=1
fi
if inpath dillo && [ ! -d "$HOME/.dillo" ]; then
    mkdir "$HOME/.dillo"
    cat > "$HOME/.dillo/dillorc" <<-EOF
	# ~/.dillo/dillorc
	start_page="http://www.google.com/
	home="http://www.google.com/
	contrast_visited_color=NO
	enterpress_forces_submit=YES
	show_extra_warnings=YES
	geometry=790x532
	EOF
    echo "DEFAULT ACCEPT" > "$HOME/.dillo/cookiesrc"
    hidden=1
fi
if inpath rox-filer && [ ! -d "$HOME/.rox_choices" ]; then
    mkdir "$HOME/.rox_choices"
    mkdir "$HOME/.rox_choices/MIME-types"
    cat > "$HOME/.rox_choices/MIME-types/text" <<-EOF
	#!/bin/sh
	# Installed by tpope installer
	exec see "\$@"
	EOF
    chmod a+x "$HOME/.rox_choices/MIME-types/text"
    for link in application audio image message model multipart text_html video; do
	ln -s text "$HOME/.rox_choices/MIME-types/$link"
    done
    hidden=1
fi
if [ -f /usr/lib/libtrash/libtrash.so -a ! -f "$HOME/.libtrash" ]; then
    cat > "$HOME/.libtrash" <<-EOF
	# ~/.libtrash
	TRASH_CAN = .trash
	IGNORE_EXTENSIONS = o;log;aux;bbl;blg;ent;toc;swp;swo;viminfo
	IGNORE_HIDDEN = NO
	GLOBAL_PROTECTION = NO
	LIBTRASH_CONFIG_FILE_UNREMOVABLE = NO
	EOF
    hidden=1
fi
[ -z "$hidden" ] || echo "Creating hidden files."
if [ ! -d "$HOME/.trash" ]; then
    mkdir "$HOME/.trash"
    chmod 0700 "$HOME/.trash"
    directories=1
fi
if [ ! -d "$HOME/dl" ]; then
    if [ -d "$HOME/downloads" ]; then
	mv "$HOME/downloads" "$HOME/dl"
	ln -s dl "$HOME/downloads"
	chmod 0755 "$HOME/dl"
	directories=1
    elif [ -d "$HOME/.mozilla" -o -f "$HOME/.lynx.cfg" ]; then
	mkdir "$HOME/dl"
	chmod 0755 "$HOME/dl"
	directories=1
    fi
fi
[ -z "$directories" ] || echo "Creating directories."
for dir in .firefox/default .phoenix/default .mozilla/default .mozilla/$LOGNAME .mozilla/firefox .galeon/mozilla; do
    [ -d "$HOME/$dir" ] || continue
    if [ -f "$HOME/$dir/profiles.ini" ]; then
	subdirs="`cat "$HOME/$dir/profiles.ini"|grep '^Path='|sed -e 's/^Path=//'`"
    else
	subdirs="`ls -1 "$HOME/$dir"`"
    fi
    for subdir in $subdirs; do
	subdir="$HOME/$dir/$subdir"
	[ -d "$subdir" ] || continue
	if [ ! -L "$subdir/user.js" ]; then
	    ln -s ../../../.netscape/user.js "$subdir/user.js"
	    links=1
	fi
	if [ -d "$subdir/chrome" -a ! -e "$subdir/chrome/userContent.css" -a ! -L "$subdir/chrome/userContent.css" ]; then
	    ln -s ../../../../.netscape/userContent.css "$subdir/chrome/userContent.css"
	    links=1
	fi
	for file in localstore.rdf ctxextensions.rdf bookmarks.html; do
	    if [ -f "$HOME/.netscape/$file" -a ! -s "$subdir/$file" ]; then
		cp "$HOME/.netscape/$file" "$subdir/$file"
	    fi
	done
    done
done
if [ -d "$HOME/.kde/share" -a ! -h "$HOME/.kde/share/icons" ]; then
    rm -rf "$HOME/.kde/share/icons" # A bad idea?
    ln -s ../../.pixmaps "$HOME/.kde/share/icons"
    links=1
fi
if [ ! -h "$HOME/.bash_logout" ]; then
    ln -s .zlogout "$HOME/.bash_logout"
fi
if [ ! -f "$HOME/bin/sdplay" ]; then
    if inpath rplay && pidof rplayd >/dev/null 2>&1; then
	ln -s "`which rplay`" "$HOME/bin/sdplay"
    elif inpath esdplay && pidof esd >/dev/null 2>&1; then
	ln -s "`which esdplay`" "$HOME/bin/sdplay"
    elif inpath artsplay && pidof artsd >/dev/null 2>&1; then
	ln -s "`which artsplay`" "$HOME/bin/sdplay"
    elif inpath play; then
	ln -s "`which play`" "$HOME/bin/sdplay"
    fi
    [ ! -h "$HOME/bin/sdplay" ] || links=1
fi
for bin in sensible-editor sensible-pager; do
    if [ -f "$HOME/bin/$bin.lnk" -a ! -h "$HOME/bin/$bin.lnk" ]; then
	rm -f "$HOME/bin/$bin.lnk"
    fi
    if [ ! -f "$HOME/bin/$bin" ]; then
	ln -s tpope "$HOME/bin/$bin"
	links=1
    fi
done
if [ -f "$HOME/.pixmaps/unknown.xpm" -a ! -f "$HOME/.pixmaps/.localhost.xpm" ]; then
    ln -sf unknown.xpm "$HOME/.pixmaps/.localhost.xpm"
    links=1
fi
if [ -f "$HOME/.pixmaps/$hostname.xpm" ]; then
    unknown="`find "$HOME/.pixmaps" -maxdepth 1 -name .localhost.xpm -lname unknown.xpm -print 2>/dev/null`"
    if [ "$unknown" ]; then
	ln -sf "$hostname.xpm" "$HOME/.pixmaps/.localhost.xpm"
	links=1
    fi
fi
if [ -x /usr/etc/renice -a ! -x "$HOME/bin/renice" ]; then
    ln -s /usr/etc/renice "$HOME/bin/renice"
    links=1
fi
[ -z "$links" ] || echo "Creating symlinks."

if inpath crontab; then
    crontab -l >/tmp/crontab.original.$$ 2>/dev/null
    cron="$?"
crontab -l 2>&1 >/dev/null | grep "no crontab" >/dev/null && cron=n
if [ "$cron" = 0 ]; then
    if grep '\<tpope\>.*\<cron\>' /tmp/crontab.original.$$ >/dev/null; then
	sed -ne '/\<tpope\>.*\<cron\>/,$p' /tmp/crontab.original.$$ | \
	sed -ne '2,$p' > /tmp/crontab.custom.$$
	cronmsg="Updating skeleton crontab."
    else
	cp /tmp/crontab.original.$$ /tmp/crontab.custom.$$
	cronmsg="Inserting skeleton crontab."
    fi
elif [ "$cron" = n ]; then
    cp /tmp/crontab.original.$$ /tmp/crontab.custom.$$
    cronmsg="Installing skeleton crontab."
fi
if [ "$cron" = 0 -o "$cron" = n ]; then
    if [ -x /bin/bash ]; then
	shell=/bin/bash
	env=BASH_ENV
    else
	shell=/bin/sh
	env=ENV
    fi
    [ -n "$PERL5LIB" ]  || PERL5LIB="$HOME/.perl5:$HOME/perl5:$HOME/.perl:$HOME/perl"
    [ -n "$RUBYLIB" ]   || RUBYLIB="$HOME/.ruby"
    [ -n "$CLASSPATH" ] || CLASSPATH=".:$HOME/.java:$HOME/java"
    cat >/tmp/crontab.template.$$ <<EOF
# -*- crontab -*- vim:set ft=crontab:
# crontab for $LOGNAME@$hostname
CRON=1
SHELL=$shell
$env=$HOME/.shrc
CLASSPATH=$CLASSPATH
PATH=$HOME/bin:/usr/local/bin:/usr/bin:/bin
PERL5LIB=$PERL5LIB
RUBYLIB=$RUBYLIB
RSYNC_RSH=ssh -axqoBatchMode=yes

20 */4 * * *	tpope cron
EOF
    cat /tmp/crontab.custom.$$ >> /tmp/crontab.template.$$
    if ! cmp /tmp/crontab.template.$$ /tmp/crontab.original.$$ >/dev/null 2>&1; then
	echo "$cronmsg"
	crontab - < /tmp/crontab.template.$$
    fi
    rm /tmp/crontab.template.$$ /tmp/crontab.custom.$$
fi
rm /tmp/crontab.original.$$
fi
if [ ! -f "$HOME/.ssh/id_rsa" ]; then
    ssh-keygen -t rsa -f "$HOME/.ssh/id_rsa" -N "" >/dev/null 2>&1 &&
    cat "$HOME/.ssh/id_rsa.pub" >> "$HOME/.ssh/authorized_keys2" &&
    echo "Generating ssh key."
fi
zsh="`grep 'zsh$' /etc/shells 2>/dev/null|head -1`"
if [ -x "$zsh" ] && grep "^$LOGNAME:" /etc/passwd >/dev/null; then
    if grep "^$LOGNAME:.*zsh" /etc/passwd >/dev/null ; then
	:
    else
	echo "Changing login shell."
	chsh -s "$zsh"
    fi
fi
