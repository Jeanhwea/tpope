#!/bin/sh
# vim:set et sw=2:

# Provides a standard interface for sending commands to various media players.

find_pulse() {
  pid=$2
  host=$3
  if [ "x$pid" = "x--current" ]; then
    w=`xprop -root _NET_ACTIVE_WINDOW | sed -e 's/.*# //'`
    pid=`xprop -id $w _NET_WM_PID | sed -e 's/.*= //'`
    host=`xprop -id $w WM_CLIENT_MACHINE | cut -s -d '"' -f 2`
  fi
  [ -n "$host" ] || host=`hostname`
  pactl list $1 | while read line; do
    case "$line" in
      *\#*[0-9]) id=`echo $line | sed -e 's/.*#//'` ;;
      $4:*) extra=`echo $line |sed -e 's/.*: //'` ;;
      "application.process.host = \"$host\"") [ -z "$foundpid" ] || echo $id $extra ;;
      "application.process.id = \"$pid\"") foundpid=1 ;;
      "application.process.id = "*) foundpid= ;;
    esac
  done
}

notify-send "media $*" &
case "$1" in
  volume)
    volume=`echo $2|sed -e 's/^\(.*\)\([+-]\)$/\2\1/'`
    if [ -n "$3" ]; then
      for si in `find_pulse sink-inputs $3 $4`; do
        pactl set-sink-input-volume $si $volume
      done
      exit 0
    fi
    for sink in `pactl list short sinks|cut -f 1`; do
      pactl set-sink-volume $sink $volume
    done
    exit 0
    ;;

  find-pulse)
    shift
    find_pulse "$@"
    exit
    ;;

  sink)
    sinks=`pactl list short sinks | wc -l`
    find_pulse sink-inputs $3 ${4:-`hostname`} Sink | while read si sink; do
      if [ "$2" = +1 -o "$2" = next ]; then
        for id in `pactl list short sinks|cut -f1`; do
          if [ $sink = $id ]; then
            next=1
          elif [ -n "$next" ]; then
            next=
            sink=$id
          fi
        done
        if [ -n "$next" ]; then
          sink=`pactl list short sinks | head -1 | cut -f1`
        fi
      fi
      pactl move-sink-input $si $sink
    done
    ;;
esac

mediaaction() {
  if ps x|grep -v grep|grep ' g*mplayer' >/dev/null && [ -p "$HOME/.mplayer/mplayer" ]; then
    exec > "$HOME/.mplayer/mplayer"
    case "$1" in
      [Qq]uit) echo quit ;;
      [Ss]top) echo gui_stop ;;
      [Pp]lay) echo gui_play ;;
      [Pp]ause|[Rr]esume)  echo pause ;;
      [Tt]oggle) echo pause ;;
      [Nn]ext) echo seek 5; echo pt_step 1 ;;
      [Pp]rev) echo seek -5; echo pt_step -1 ;;
      [Ff]fwd) echo seek ${2:-5} ;;
      [Rr]ew) echo seek -${2:-5} ;;
    esac
    return 0
  elif [ -x "`which dbus-send 2>/dev/null`" ] && \
    dbus-send --print-reply --dest=org.freedesktop.DBus / org.freedesktop.DBus.ListNames|grep '^ *string "org\.mpris\.MediaPlayer2\..*"' >/dev/null; then
    dest="`dbus-send --print-reply --dest=org.freedesktop.DBus / org.freedesktop.DBus.ListNames|grep '^ *string "org\.mpris\.MediaPlayer2\..*"'|head -1|sed -e 's/"$//' -e 's/.*"//'`"
    case "$1" in
      [Qq]uit) cmd=Quit ;;
      [Ss]top) cmd=Player.Stop ;;
      [Pp]lay|[Rr]esume) cmd=Player.Play ;;
      [Pp]ause) cmd=Player.Pause ;;
      [Tt]oggle) cmd=Player.PlayPause ;;
      [Nn]ext) cmd=Player.Next ;;
      [Pp]rev) cmd=Player.Previous ;;
      [Ff]fwd) cmd="Player.Seek int64:${2:-5}000000" ;;
      [Rr]ew) cmd="Player.Seek int64:-${2:-5}000000" ;;
    esac
    dbus-send --print-reply --dest=$dest /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.$cmd >/dev/null
    return 0
  elif ps x|grep -v grep|egrep "[0-9][0-9] (xmms|beep-media-player)" \
    >/dev/null && [ -x /usr/bin/xmms-shell ]; then
    case "$2" in *:[0-9][0-9]) time="$(expr 60 \* $(echo $2|sed -e 's/:.*//') + $(echo $2|sed -e 's/.*://'))" ;; *) time="${2:-5}" ;; esac
    exec >/dev/null
    case "$1" in
      [Qq]uit) xmms-shell -e xmmsexit & ;;
      [Ss]top) xmms-shell -e stop & ;;
      # [Pp]lay) xmms-shell -e play & ;;
      [Pp]ause) perl -MXmms::Remote -e 'my $remote = Xmms::Remote->new; $remote->pause if !$remote->is_paused' ;;
      [Rr]esume) perl -MXmms::Remote -e 'my $remote = Xmms::Remote->new; $remote->pause if $remote->is_paused' ;;
      [Pp]lay) perl -MXmms::Remote -e 'my $remote = Xmms::Remote->new; $remote->pause if $remote->is_paused; $remote->play if !$remote->is_playing' || xmms-shell -e play & ;;
      [Tt]oggle) perl -MXmms::Remote -e 'my $remote = Xmms::Remote->new; $remote->pause; $remote->play if !$remote->is_playing' || xmms-shell -e pause & ;;
      [Nn]ext) xmms-shell -e forward & ;;
      [Pp]rev) xmms-shell -e backward & ;;
      [Ff]fwd) perl -MXmms -e "time '+$time'" ;;
      [Rr]ew) perl -MXmms -e "time '-$time'" ;;
    esac
    return 0
  elif [ -x "`which mpris-remote 2>/dev/null`" ] && mpris-remote >/dev/null 2>&1; then
    case "$1" in
      [Qq]uit) mpris-remote quit ;;
      [Ss]top) mpris-remote stop ;;
      [Pp]lay|[Rr]esume) mpris-remote play ;;
      [Pp]ause)
        if mpris-remote playstatus | grep 'playing: playing' >/dev/null; then
          mpris-remote pause
        fi
        ;;
      [Tt]oggle)
        if mpris-remote playstatus | grep 'playing: playing' >/dev/null; then
          mpris-remote pause
        else
          mpris-remote play
        fi
        ;;
      [Nn]ext) mpris-remote next ;;
      [Pp]rev) mpris-remote previous ;;
    esac
    return 0
  elif pidof amarok >/dev/null 2>&1; then
    exec >/dev/null 2>&1
    case "$1" in
      [Qq]uit) pkill amarok ;;
      [Ss]top) amarok --stop ;;
      [Pp]lay|[Rr]esume) amarok --play ;;
      [Pp]ause) amarok --pause ;;
      [Tt]oggle) amarok --play-pause ;;
      [Nn]ext) amarok --next ;;
      [Pp]rev) amarok --previous ;;
    esac
    return 0
  elif [ -p "/tmp/.TV-$USER/tvtimefifo-`hostname`" ] && pidof tvtime >/dev/null 2>&1; then
    exec >/dev/null 2>&1
    case "$1" in
      [Ss]top|[Qq]uit) tvtime-command QUIT & ;;
      [Pp]lay|[Rr]esume) tvtime-command PICTURE & ;;
      [Pp]ause|[Rr]esume) tvtime-command TOGGLE_MUTE & ;;
      [Tt]oggle) tvtime-command TOGGLE_MUTE & ;;
      [Nn]ext) tvtime-command CHANNEL_UP & ;;
      [Pp]rev) tvtime-command CHANNEL_DOWN & ;;
      [Ff]fwd) tvtime-command PICTURE_UP & ;;
      [Rr]ew) tvtime-command PICTURE_DOWN & ;;
    esac
    return 0
  elif [ -n "$DISPLAY" ]; then
    xlsclients|grep xmms >/dev/null && player=xmms
    xlsclients|grep beep-media-player >/dev/null && player=beep-media-player
    if [ -n "$player" ]; then
      exec >/dev/null
      case "$1" in
        [Qq]uit) pkill xmms beep-media-player ;;
        [Ss]top) $player -s & ;;
        [Pp]lay|[Rr]esume) $player -p & ;;
        [Pp]ause) $player -u & ;;
        [Tt]oggle) $player -t & ;;
        [Nn]ext) $player -f & ;;
        [Pp]rev) $player -r & ;;
      esac
      return 0
    fi

    xlsclients|grep xawtv >/dev/null && player=xawtv-remote
    if [ -n "$player" ]; then
      exec >/dev/null
      case "$1" in
        [Ss]top|[Qq]uit) $player quit & ;;
        [Pp]lay|[Rr]esume) $player volume mute & ;;
        [Pp]ause) $player volume mute & ;;
        [Tt]oggle) $player volume mute & ;;
        [Nn]ext) $player setchannel next & ;;
        [Pp]rev) $player setchannel prev & ;;
      esac
      return 0
    fi
  fi
  if [ -x "/usr/bin/cdcd" ]; then
    [ -f "$HOME/.cdcdrc" ] || \
      echo "device=/dev/cdrom" > "$HOME/.cdcdrc"
    if [ "`cdcd status 2>/dev/null`" != "No disc in drive" -a -n "`cdcd status 2>/dev/null`" ]; then
    case "$1" in
      [Qq]uit) cdcd open ;;
      [Ss]top) cdcd stop ;;
      [Pp]ause) cdcd pause ;;
      [Rr]esume) cdcd resume ;;
      [Nn]ext) cdcd next ;;
      [Pp]rev) cdcd prev ;;
      [Ff]fwd) cdcd ff "${2:-5}" ;;
      [Rr]ew) cdcd rew "${2:-5}" ;;
      [Pp]lay|[Tt]oggle)
      if cdcd status 2>/dev/null|grep Playing >/dev/null; then
        cdcd pause
      elif cdcd status 2>/dev/null|grep Paused >/dev/null; then
        cdcd resume
      else
        cdcd play
      fi ;;
    esac
    return 0
    fi
  fi
  LONGEST="`lsdvd 2>/dev/null|tail -1|sed -e 's/Longest track: //'`"
  if [ "$LONGEST" ]; then
    case "$1" in
      [Qq]uit) eject /dev/dvd ;;
      [Pp]lay|[Tt]oggle)
        gmplayer -af volume=10 dvd://$LONGEST >/dev/null 2>&1 </dev/null &
        if [ -p "$HOME/.mplayer/mplayer" ]; then
          sleep 5
          echo "vo_fullscreen" > "$HOME/.mplayer/mplayer"
        fi ;;
    esac
    return
  fi
  return 1
}

mediaaction "$@"
