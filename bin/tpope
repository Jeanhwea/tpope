#!/bin/sh
# $Id$
# -*- sh -*- vim: ft=sh sw=4 sts=4

# This is a multipurpose script that is easier to copy around than 30-odd
# single purpose ones.  If a function grows too big, it earns its own file,
# and this script is modified to call that file instead.

# Of particular interest here is the start/restart/etc functions, which call
# the appropriate script in /etc/init.d.

[ -z "$PATH" ] && PATH="$HOME/bin:/usr/local/bin:/usr/bin:/bin"

basename="`basename $0`"
[ "$basename" = tpope ] && tpope='tpope ' basename="$1" && shift

rcd=/etc/init.d
[ -d "$rcd" ] || rcd=/etc/rc.d
[ "`whoami`" != root -a "`id -u`" -ne 0 ] && sudo="sudo -H"

hostname="`hostname|sed -e 's/[.].*//'`"

mediaaction() {
    exec "$HOME/bin/media" "$@"
}

do_clean() {
	if [ "$1" = -v ]; then
	    FIND()    { find "$@" ! -type d -print 2>/dev/null; }
	    FINDDIR() { find "$@" -mindepth 1 -type d -print 2>/dev/null; }
	    shift
	else
	    FINDDIR() { find "$@" -mindepth 1 -type d -print0 2>/dev/null | \
		    xargs -r0 rmdir >/dev/null 2>&1; }
	    if [ -x "`which wipe 2>/dev/null`" ]; then
		FIND()    { find "$@" ! -type d -print0 2>/dev/null | \
			xargs -r0 wipe -fcsq >/dev/null 2>&1; }
	    else
		FIND()    { find "$@" ! -type d -print0 2>/dev/null | \
			xargs -r0 rm >/dev/null 2>&1; }
	    fi
	fi
	case "$1" in
	    1|2|3|4|5) unit=$1 ;;
	    '') unit=4 ;;
	    *) echo "Usage: $tpope$basename [-v] [1-5]" >&2; exit 1 ;;
	esac
	unset LD_PRELOAD
	PROTECT_TRASH=NO
	export PROTECT_TRASH
	FIND "$HOME" \( -path /media -o -path /priv \) -prune -o \( -name "*~" -o -name ".*~" -o -name ".*.sw?" -o -name .viminfo -o -name .zcompdump -o -name "*.aux" -o -name "*.blg" -o -name ".*.bak" \) -atime +`expr $unit \* 30`
	FIND "/tmp" "/var/tmp" "$HOME/tmp" -user "$LOGNAME" -atime +`expr $unit \* 30`
	FIND "$HOME/.trash" -atime +`expr $unit \* 15`
	FIND "$HOME/.trash" -amin +`expr \( $unit - 1 \) \* 360` -size +8192k
	FIND "$HOME/.trash" -amin +`expr \( $unit - 1 \) \* 5` -size +65536k
	FINDDIR "$HOME/.trash" -mtime +`expr $unit \* 1` -empty
	if [ ! -d "$HOME/.trash" ]; then
	    mkdir "$HOME/.trash" && chmod 0700 "$HOME/.trash"
	fi
	rm -f "$HOME/bin/ruptime" "$HOME/bin/rwho" "$HOME/bin/start" "$HOME/bin/stop" "$HOME/bin/restart" "$HOME/bin/reload" "$HOME/bin/force-reload" "$HOME/bin/runcontrol" "$HOME/bin/launch" "$HOME/bin/www-browser" "$HOME/bin/ps-grep"
	return 0
}

do_install() {
    [ "$1" != "--cron" ] || exec >/dev/null
    if [ ! -f "$HOME/. tpope" -o -r "$HOME/. tpope" ]; then
	touch "$HOME/. tpope"
	chmod 0000 "$HOME/. tpope"
	hidden=1
    fi
    if [ ! -f "$HOME/.hushlogin" ]; then
	touch "$HOME/.hushlogin"
	hidden=1
    fi
    if [ -x "`which mplayer 2>/dev/null`" -a ! -d "$HOME/.mplayer" ]; then
	mkdir "$HOME/.mplayer"
	cat > "$HOME/.mplayer/config" <<EOF
# ~/.mplayer/config
vo=xv,x11,fb,aa
alang=en
slang=en
framedrop=yes
EOF
	hidden=1
    fi
    [ -z "$hidden" ] || echo "Creating hidden files."
    if [ ! -d "$HOME/.trash" ]; then
	mkdir "$HOME/.trash"
	chmod 0700 "$HOME/.trash"
	directories=1
    fi
    if [ ! -d "$HOME/dl" ]; then
	if [ -d "$HOME/downloads" ]; then
	    mv "$HOME/downloads" "$HOME/dl"
	    ln -s dl "$HOME/downloads"
	    chmod 0755 "$HOME/dl"
	    directories=1
	    for file in "$HOME/.elinks/elinks.conf" "$HOME/.pork/porkrc" "$HOME/.irssi/config"; do
		if [ -f "$file" ] && grep /downloads "$file" >/dev/null; then
		    cp "$file" /tmp/.install.$$
		    sed -e 's,/downloads,/dl,g' < /tmp/.install.$$ > "$file"
		    rm /tmp/.install.$$
		fi
	    done
	elif [ -d "$HOME/.mozilla" -o -d "$HOME/.irssi" ]; then
	    mkdir "$HOME/dl"
	    chmod 0755 "$HOME/dl"
	    directories=1
	fi
    fi
    [ -z "$directories" ] || echo "Creating directories."
    for dir in .firefox/default .phoenix/default .mozilla/default .mozilla/$LOGNAME .mozilla/firefox; do
	[ -d "$HOME/$dir" ] || continue
	if [ -f "$HOME/$dir/profiles.ini" ]; then
	    subdirs="`cat "$HOME/$dir/profiles.ini"|grep '^Path='|sed -e 's/^Path=//'`"
	else
	    subdirs="`ls -1 "$HOME/$dir"`"
	fi
	for subdir in $subdirs; do
	    subdir="$HOME/$dir/$subdir"
	    [ -d "$subdir" ] || continue
	    if [ ! -L "$subdir/user.js" ]; then
		ln -s ../../../.netscape/user.js "$subdir/user.js"
		links=1
	    fi
	    for file in localstore.rdf ctxextensions.rdf bookmarks.html; do
		if [ -f "$HOME/.netscape/$file" -a ! -s "$subdir/$file" ]; then
		    cp "$HOME/.netscape/$file" "$subdir/$file"
		fi
	    done
	done
    done
    if [ ! -f "$HOME/bin/sdplay" ]; then
	if [ -x "`which rplay 2>/dev/null`" ] && pidof rplayd >/dev/null 2>&1; then
	    ln -s "`which rplay`" "$HOME/bin/sdplay"
	elif [ -x "`which esdplay 2>/dev/null`" ] && pidof esd >/dev/null 2>&1; then
	    ln -s "`which esdplay`" "$HOME/bin/sdplay"
	elif [ -x "`which artsplay 2>/dev/null`" ] && pidof artsd >/dev/null 2>&1; then
	    ln -s "`which artsplay`" "$HOME/bin/sdplay"
	elif [ -x "`which play 2>/dev/null`" ]; then
	    ln -s "`which play`" "$HOME/bin/sdplay"
	fi
	[ ! -h "$HOME/bin/sdplay" ] || links=1
    fi
    if [ -f "$HOME/.pixmaps/unknown.xpm" -a ! -f "$HOME/.pixmaps/.localhost.xpm" ]; then
	ln -sf unknown.xpm "$HOME/.pixmaps/.localhost.xpm"
	links=1
    fi
    if [ -f "$HOME/.pixmaps/$hostname.xpm" ]; then
	unknown="`find "$HOME/.pixmaps" -maxdepth 1 -name .localhost.xpm -lname unknown.xpm -print 2>/dev/null`"
	if [ "$unknown" ]; then
	    ln -sf "$hostname.xpm" "$HOME/.pixmaps/.localhost.xpm"
	    links=1
	fi
    fi
#    if [ "`uname`" = Linux ] && [ ! "$HOME/.pixmaps/.localhost.xpm" -ef "$HOME/.pixmaps/$hostname.xpm" ] || [ ! -f "$HOME/.pixmaps/.localhost.xpm" ]; then
#	if [ -f "$HOME/.pixmaps/$hostname.xpm" ]; then
#	    ln -sf "$hostname.xpm" "$HOME/.pixmaps/.localhost.xpm"
#	    links=1
#	elif [ ! -f "$HOME/.pixmaps/.localhost.xpm" ]; then
#	    ln -s "unknown.xpm" "$HOME/.pixmaps/.localhost.xpm"
#	    links=1
#	fi
#    fi
    [ -z "$links" ] || echo "Creating symlinks."
    if [ -x "`which crontab 2>/dev/null`" ]; then
    crontab -l >/tmp/crontab.original.$$ 2>/dev/null
    cron="$?"
    if [ "$cron" = 0 ]; then
	if grep '\<tpope\>.*\<cron\>' /tmp/crontab.original.$$ >/dev/null; then
	    sed -ne '/\<tpope\>.*\<cron\>/,$p' /tmp/crontab.original.$$ | \
	    sed -ne '2,$p' > /tmp/crontab.custom.$$
	    cronmsg="Updating skeleton crontab."
	else
	    cp /tmp/crontab.original.$$ /tmp/crontab.custom.$$
	    cronmsg="Inserting skeleton crontab."
	fi
    elif [ "$cron" = 1 ]; then
	cp /tmp/crontab.original.$$ /tmp/crontab.custom.$$
	cronmsg="Installing skeleton crontab."
    fi
    if [ "$cron" = 0 -o "$cron" = 1 ]; then
	shell=/bin/sh
	env=ENV
	if [ -x /bin/bash ]; then
	    shell=/bin/bash
	    env=BASH_ENV
	fi
	cat >/tmp/crontab.template.$$ <<EOF
# crontab for $LOGNAME@$hostname
# -*- crontab -*- vim: ft=crontab
SHELL=$shell
$env=$HOME/.shrc
CLASSPATH=.:$HOME/.java:$HOME/java
PATH=$HOME/bin:/usr/local/bin:/usr/bin:/bin
PERL5LIB=$HOME/.perl5:$HOME/perl5:$HOME/.perl:$HOME/perl
RSYNC_RSH=ssh -axqoBatchMode=yes

05   4 * * *	tpope cron
EOF
	cat /tmp/crontab.custom.$$ >> /tmp/crontab.template.$$
	if ! cmp /tmp/crontab.template.$$ /tmp/crontab.original.$$ >/dev/null 2>&1; then
	    echo "$cronmsg"
	    crontab - < /tmp/crontab.template.$$
	fi
	rm /tmp/crontab.template.$$ /tmp/crontab.custom.$$
    fi
    rm /tmp/crontab.original.$$
    fi
    if [ ! -f "$HOME/.ssh/id_rsa" ]; then
	ssh-keygen -t rsa -f "$HOME/.ssh/id_rsa" -N "" >/dev/null 2>&1 &&
	cat "$HOME/.ssh/id_rsa.pub" >> "$HOME/.ssh/authorized_keys2" &&
	echo "Generating ssh key."
    fi
    zsh="`grep 'zsh$' /etc/shells 2>/dev/null|head -1`"
    if [ -x "$zsh" ] && grep "^$LOGNAME:" /etc/passwd >/dev/null; then
	if grep "^$LOGNAME:.*zsh" /etc/passwd >/dev/null ; then
	    :
	else
	    echo "Changing login shell."
	    chsh -s "$zsh"
	fi
    fi
}

display_manage() {
    # Disables DPMS and xscreensaver for the duration of a programs execution
    [ "$DISPLAY" ] || DISPLAY=:0
    xset=xset
    [ -z "`which xset 2>/dev/null`" ] && xset=/usr/bin/X11/xset
    dpms="`$xset q 2>/dev/null|grep 'Monitor is'|sed -e 's/^ *Monitor is.* \([A-Za-z]*\)$/\1/'|tr 'A-Z' 'a-z'`"
    case "$dmps" in
	on|standby|suspend|off) ;;
	*) dpms=on ;;
    esac
    #$xset dpms force on
    while kill -0 $$ 2>/dev/null; do
	xscreensaver-command -deactivate >/dev/null 2>&1
	sleep 55
    done &
    "$@"
    ret=$?
    $xset dpms force $dpms
    return $?
}

case "$basename" in

    aliases)
	echo launch lt lv dm pg sb sursync ruptime rwho \
	rclink rc start stop restart reload force-reload \
	media tomorrow vnc word emerge aptitude whois xscc mpl mpa
	exit 0 ;;
    
    activity|away)
	if [ "$hostname" != marge ] && ping -c 1 marge >/dev/null 2>&1; then
	    [ "$#" = 1 -a -z "$1" ] && exec hostinfo -S marge -ax tpope $basename -c
	    exec hostinfo --batch-ssh marge tpope $basename "$@"
	fi
	if [ "$#" = 0 ]; then
	    cat "$HOME/.$basename" 2>/dev/null
	    exit
	elif [ "$1" = "-c" -o "$1" = "" ]; then
	    rm -f "$HOME/.$basename"
	    exit 0
	elif [ "$1" = "-" ]; then
	    cat > "$HOME/.$basename"
	    [ -s "$HOME/.$basename" ] || rm -f "$HOME/.$basename"
	    exit
	else
	    echo "$@" > "$HOME/.$basename"
	    exit
	fi
	;;

    clean) do_clean "$@" ;;

    cron)
	[ ! -x "`which renice 2>/dev/null`" ] || renice 12 -p $$ >/dev/null 2>&1
	if [ "$1" = --login ]; then
	    (find "$HOME" -maxdepth 1 -name ". tpope" -mtime +8 -exec tpope cron \; || find "$HOME" -name ". tpope" -mtime +8 -exec tpope cron \;) 2>/dev/null &
	    # The part after the || is for versions of find that don't support
	    # -maxdepth, such as busybox
	    exit 0
	fi
	do_install >/dev/null; do_clean 5
	find "$HOME" -maxdepth 1 -name ".autodl" -mtime +30 -exec sh -c 'sync-tpope -W && touch "$HOME/.autodl"' \; 2>/dev/null
	touch "$HOME/. tpope"
    ;;

    display-manage|dm) display_manage "$@" ;;
    mpl) display_manage mplayer -fs -loop 0 "$@" ;;
    mpa) DISPLAY=  mplayer -quiet -vo fb,aa "$@" ;;

    emerge|aptitude)
	if [ "$1" = search ]; then
	    exec "$basename" "$@"
	else
	    exec $sudo "$basename" "$@"
	fi
	;;

    launch)
	exec >/dev/null 2>&1 </dev/null
	if [ "$1" = "-dm" -o "$1" = "-md" ]; then
	    shift
	    pidof -x "$1" >/dev/null && exit 0
	    prefix="tpope display-manage"
	fi
	if [ "$1" = "-d" ]; then
	    shift
	    pidof -x "$1" >/dev/null && exit 0
	fi
	if [ "$1" = "-m" ]; then
	    shift
	    prefix="tpope display-manage"
	fi
	for arg in "$2" "$3" "$4"; do
	    case "$arg" in
		/*) [ -e "$arg" ] && dontcd=1 ;;
		-*) [ -e "$arg" ] && dontcd=1 ;;
		*) ;;
	    esac
	done
	[ "$dontcd" ] || cd
	$prefix "$@" &
	exit 0
    ;;

    logview|lv)
	[ "$PAGER" ] || PAGER=more
	# Pager should already be "less" or something is wrong
	cd /var/log
	exec $PAGER +G "$@"
	;;

    ps-grep|pg)
    if [ "`uname`" = Linux -o ! -x /usr/bin/ps ]; then
	ps uf|head -1
	exec ps auxf|egrep -v 'grep\>|\<pg\>'|sed -ne '2,$p'|grep "$@"
    else
	/usr/bin/ps -f|head -1
	exec /usr/bin/ps -ef|grep -v '\<grep\>'|sed -ne '2,$p'|grep "$@"
    fi
    ;;

    rclink|link)
	if [ "$#" -eq 0 -o "$#" -gt 4 ]; then
		echo "Usage: $tpope$basename <init-script> [ <start-levels> [ <start> [ <stop> ] ] ]"
		exit 1
	fi
	sed -ne '/# chkconfig: /s///p' "/etc/init.d/$1" \
	    2>/dev/null |read run start stop trash
	[ "$stop" ] || run=2345 start=20 stop=20
	[ -z "$2" ] || run="$2"
	[ -z "$3" ] || start="$3" stop="$3"
	[ -z "$4" ] || stop="$4"
	for i in 0 1 2 3 4 5 6; do
	    $sudo rm -f /etc/rc$i.d/[SK][0-9][0-9]"$1"
	    case $run in
		[Xx])   ;;
		*$i*) $sudo ln -s "../init.d/$1" "/etc/rc$i.d/S$start$1" ;;
		*)    $sudo ln -s "../init.d/$1" "/etc/rc$i.d/K$stop$1" ;;
	    esac
	done
	exit 0
    ;;

    runcontrol|rc)
	if [ "`expr $# % 2`" -ne 0 -o "$#" -eq 0 ]; then
		echo "Usage: $tpope$basename <action> <init-script> [ <action> <init-script> [ ... ] ]"
		exit 1
	fi
	while [ "$#" -gt 0 ]; do
	    $sudo "$rcd/$2" "$1"
	    shift 2
	done
	exit 0
    ;;

    sensible-browser|sb) exec "$HOME/bin/sensible-browser" "$@" ;;

    start|stop|restart|reload|force-reload)
	for daemon in "$@"; do
	    $sudo "$rcd/$daemon" "$basename"
	done
	[ -z "$*" -a "$basename" = stop ] && mediaaction stop && exit 0
	[ "$*" ]
	exit
    ;;

    hostinfo) exec "$HOME/bin/hostinfo" "$@" ;;
    ruptime)  exec "$HOME/bin/hostinfo" -u "$@" ;;
    rwho)     exec "$HOME/bin/hostinfo" -w "$@" ;;
    ssh)      exec "$HOME/bin/hostinfo" --ssh "$@" ;;

    libtrash|lt)    
	case "$LD_PRELOAD" in *libtrash*) ;; *)
	if [ -f /usr/lib/libtrash/libtrash.so -a -f "$HOME/.libtrash" ]; then
	   LD_PRELOAD="$LD_PRELOAD${LD_PRELOAD:+:}/usr/lib/libtrash/libtrash.so"
	   export LD_PRELOAD
	fi ;; esac
	"$@"
	;;

    install) do_install "$@" ;;

    soffice)
	if [ ! -d "$HOME/.openoffice" ]; then
	    echo "Sorry, OpenOffice.org not installed." >&2
	    exit 1
	fi
	ver=`ls "$HOME/.openoffice"|tail -1`
	exec "$HOME/.openoffice/$ver/soffice" "$@"
	;;

    media) mediaaction "$@"; exit ;;
    
    [Qq]uit|Stop|[Pp]lay|[Pp]ause|[Rr]esume|[Tt]oggle|[Nn]ext|[Pp]rev|[Ff]fwd|[Rr]ew) mediaaction "$basename" "$@"; exit ;;

    sursync|suscp)
    for arg in "$@"; do
	case "$arg" in
	    [!-]*:*) ssh -axqt "`echo $arg|sed -e 's/:.*//'`" sudo -v -p "\"%u@%h's sudo password:\"" || exit ;;
	esac
    done
    [ "$basename" = suscp ] && args=-P
    exec sudo -p "%u@%h's sudo password:" rsync $args -e "ssh -axF $HOME/.ssh/config -i $HOME/.ssh/id_rsa" --rsync-path="sudo rsync" "$@"
    ;;

    sync-tpope|sync) if [ "$#" = 0 ]; then
			exec "$HOME/bin/sync-tpope" -W
		    else
			exec "$HOME/bin/sync-tpope" "$@"
		    fi ;;

    temperature) webget="curl -m8 -s"
	[ ! -x "`which wget 2>/dev/null`" ] || webget="wget -t1 -T8 -qO -"
	temp="`$webget http://weather.noaa.gov/weather/current/${1:-KSAT}.html 2>/dev/null| grep -A 2 ' Temperature ' | tail -1 | awk '{print $3}'`"
	case "$temp" in
	    ?????*) echo "$temp" ;;
	    ????)  echo " $temp" ;;
	    ???)  echo "  $temp" ;;
	    ??)  echo "   $temp" ;;
	    *) echo " --$temp.-" ;;
	esac
	;;

    tomorrow) today --date=tomorrow "$@" ;;

    url)
	if [ "$*" = "-" ]; then
	    url="`cat`"
	else
	    url="$*"
	fi
	if [ ! -e "$url" ]; then
	case url in
	    /*|./*) ;;
	    *://*|*.*.*/*) url="`echo $url|tr -d ' \t\n\r\f'`" ;;
	    *) url="http://www.google.com/search?q=`echo $url|sed -e 's/%/%25/g' -e 's/+/%2B/g' -e 's/ /+/g' -e 's/&/%26/g' -e 's/=/%3D/g'`" ;;
	esac
	fi
    exec "$HOME/bin/sensible-browser" "$url" ;;

    vnc)
    if [ -f "$HOME/.vnc/$1" ]; then
	exec xvncviewer -passwd "$HOME/.vnc/$1" "$@"
    else
	exec xvncviewer "$@"
    fi
    exit 1
    ;;

    whois)
    if [ "$1" != "-H" ]; then
	exec whois -H "$@"
    else
	exec /usr/bin/whois "$@"
    fi
    ;;

    word) cat /usr/share/dict/words | egrep "$@" ;;
    xauth-get) exec hostinfo --batch-ssh "$1" xauth extract - "$1:0"|xauth merge - ;;
    x-terminal-emulator|xterm) exec "$HOME/bin/x-terminal-emulator" "$@" ;;
    xscc)
	case "$DISPLAY" in localhost:*|'') DISPLAY=:0 ;; esac
	export DISPLAY
	exec xscreensaver-command "$@" ;;

    '') echo "Usage: `basename $0` <command> [options]" ;;
    *) echo "$basename: unknown command." >&2 ;;
esac
