#!/bin/sh
# $Id$
# -*- sh -*- vim: ft=sh sw=4 sts=4

# This is a multipurpose script that is easier to copy around than 30-odd
# single purpose ones.  If a function grows too big, it earns its own file,
# and this script is modified to call that file instead.

# Of particular interest here is the start/restart/etc functions, which call
# the appropriate script in /etc/init.d, and the play/pause/etc functions,
# which determine what media player is running and tell it to perform that
# action.

[ -z "$PATH" ] && PATH="$HOME/bin:/usr/local/bin:/usr/bin:/bin"

basename="`basename $0`"
[ "$basename" = tpope ] && tpope='tpope ' basename="$1" && shift

rcd=/etc/init.d
[ -d "$rcd" ] || rcd=/etc/rc.d
[ "`whoami`" != root -a "`id -u`" -ne 0 ] && sudo="sudo -H"

mediaaction() {
    if ps x|grep -v grep|grep ' g*mplayer' >/dev/null && [ -p "$HOME/.mplayer/mplayer" ]; then
	exec > "$HOME/.mplayer/mplayer"
	case "$1" in
	    [Qq]uit)   echo quit ;;
	    [Ss]top)   echo gui_stop ;;
	    [Pp]lay) echo gui_play ;;
	    [Pp]ause|[Rr]esume)  echo pause ;;
	    [Tt]oggle) echo pause ;;
	    [Nn]ext)   echo seek 5; echo pt_step 1 ;;
	    [Pp]rev)   echo seek -5; echo pt_step -1 ;;
	    [Ff]fwd)   echo seek ${2:-5} ;;
	    [Rr]ew)    echo seek -${2:-5} ;;
	esac
	return 0
    elif ps x|grep -v grep|egrep "[0-9][0-9] (xmms|beep-media-player)" \
	>/dev/null && [ -x /usr/bin/xmms-shell ]; then
	case "$2" in *:[0-9][0-9]) time="$(expr 60 \* $(echo $2|sed -e 's/:.*//') + $(echo $2|sed -e 's/.*://'))" ;; *) time="${2:-5}" ;; esac
	exec >/dev/null
	case "$1" in
	    [Qq]uit)   xmms-shell -e xmmsexit & ;;
	    [Ss]top)   xmms-shell -e stop & ;;
#	    [Pp]lay)   xmms-shell -e play & ;;
	    [Pp]ause)  perl -MXmms::Remote -e 'my $remote = Xmms::Remote->new; $remote->pause if !$remote->is_paused' ;;
	    [Rr]esume) perl -MXmms::Remote -e 'my $remote = Xmms::Remote->new; $remote->pause if $remote->is_paused' ;;
	    [Pp]lay) perl -MXmms::Remote -e 'my $remote = Xmms::Remote->new; $remote->pause if $remote->is_paused; $remote->play if !$remote->is_playing' || xmms-shell -e play & ;;
	    [Tt]oggle) perl -MXmms::Remote -e 'my $remote = Xmms::Remote->new; $remote->pause; $remote->play if !$remote->is_playing' || xmms-shell -e pause & ;;
	    [Nn]ext)   xmms-shell -e forward & ;;
	    [Pp]rev)   xmms-shell -e backward & ;;
	    [Ff]fwd)   perl -MXmms -e "time '+$time'" ;;
	    [Rr]ew)    perl -MXmms -e "time '-$time'" ;;
	esac
	return 0
    elif [ -p "/tmp/.TV-$USER/tvtimefifo-`hostname`" ] && pidof tvtime >/dev/null 2>&1; then
	exec >/dev/null 2>&1
	case "$1" in
	    [Ss]top|[Qq]uit)   tvtime-command QUIT & ;;
	    [Pp]lay|[Rr]esume) tvtime-command PICTURE & ;;
	    [Pp]ause|[Rr]esume)  tvtime-command TOGGLE_MUTE & ;;
	    [Tt]oggle) tvtime-command TOGGLE_MUTE & ;;
	    [Nn]ext)   tvtime-command CHANNEL_UP & ;;
	    [Pp]rev)   tvtime-command CHANNEL_DOWN & ;;
	    [Ff]fwd)   tvtime-command PICTURE_UP & ;;
	    [Rr]ew)    tvtime-command PICTURE_DOWN & ;;
	esac
	return 0
    elif [ -n "$DISPLAY" ]; then
	xlsclients|grep xmms >/dev/null && player=xmms
	xlsclients|grep beep-media-player >/dev/null && player=beep-media-player
	if [ -n "$player" ]; then
	    exec >/dev/null
	    case "$1" in
		[Qq]uit)   pkill xmms beep-media-player ;;
		[Ss]top)   $player -s & ;;
		[Pp]lay|[Rr]esume) $player -p & ;;
		[Pp]ause)  $player -u & ;;
		[Tt]oggle) $player -t & ;;
		[Nn]ext)   $player -f & ;;
		[Pp]rev)   $player -r & ;;
	    esac
	    return 0
	fi

	xlsclients|grep xawtv >/dev/null && player=xawtv-remote
	if [ -n "$player" ]; then
	    exec >/dev/null
	    case "$1" in
		[Ss]top|[Qq]uit)   $player quit & ;;
		[Pp]lay|[Rr]esume) $player volume mute & ;;
		[Pp]ause)  $player volume mute & ;;
		[Tt]oggle) $player volume mute & ;;
		[Nn]ext)   $player setchannel next & ;;
		[Pp]rev)   $player setchannel prev & ;;
	    esac
	    return 0
	fi
    fi
    if [ -x "/usr/bin/cdcd" ]; then
	[ -f "$HOME/.cdcdrc" ] || \
	    echo "device=/dev/cdrom" > "$HOME/.cdcdrc"
	if [ "`cdcd info 2>/dev/null`" != "No disc in drive" -a -n "`cdcd info 2>/dev/null`" ]; then
	case "$1" in
	    [Qq]uit) cdcd open ;;
	    [Ss]top) cdcd stop ;;
	    [Pp]ause) cdcd pause ;;
	    [Rr]esume) cdcd resume ;;
	    [Nn]ext) cdcd next ;;
	    [Pp]rev) cdcd prev ;;
	    [Ff]fwd) cdcd ff "${2:-5}" ;;
	    [Rr]fwd) cdcd rew "${2:-5}" ;;
	    [Pp]lay|[Tt]oggle)
	    if cdcd info 2>/dev/null|grep Playing >/dev/null; then
		cdcd pause
	    elif cdcd info 2>/dev/null|grep Paused >/dev/null; then
		cdcd resume
	    else
		cdcd play
	    fi ;;
	esac
	return 0
	fi
    fi
    if [ "`hostname`" = lisa ] && ping -c 1 mona >/dev/null 2>&1; then
	hostinfo --batch-ssh mona DISPLAY=:0 "$HOME/bin/tpope" media "$@"
	return
    fi
    LONGEST="`lsdvd 2>/dev/null|tail -1|sed -e 's/Longest track: //'`"
    if [ "$LONGEST" ]; then
	case "$1" in
	    [Qq]uit) eject /dev/dvd ;;
	    [Pp]lay|[Tt]oggle)
		gmplayer -af volume=10 dvd://$LONGEST >/dev/null 2>&1 </dev/null &
		if [ -p "$HOME/.mplayer/mplayer" ]; then
		    sleep 5
		    #echo "vo_fullscreen" > "$HOME/.mplayer/mplayer"
		    echo "vo_fullscreen" > "$HOME/.mplayer/mplayer"
		fi ;;
	esac
	return
    fi
    return 1
}

case "$basename" in

    aliases)
	echo launch lt lv pg sb sursync rclink rc start stop restart reload force-reload ruptime rwho media tomorrow vnc word emerge aptitude
	exit 0 ;;
    
    activity|away)
	if [ "`hostname`" != marge ] && ping -c 1 marge >/dev/null 2>&1; then
	    [ "$#" = 1 -a -z "$1" ] && exec hostinfo -S marge -ax tpope $basename -c
	    exec hostinfo --batch-ssh marge tpope $basename "$@"
	fi
	if [ "$#" = 0 ]; then
	    cat "$HOME/.$basename" 2>/dev/null
	    exit
	elif [ "$1" = "-c" -o "$1" = "" ]; then
	    rm -f "$HOME/.$basename"
	    exit 0
	elif [ "$1" = "-" ]; then
	    cat > "$HOME/.$basename"
	    [ -s "$HOME/.$basename" ] || rm -f "$HOME/.$basename"
	    exit
	else
	    echo "$@" > "$HOME/.$basename"
	    exit
	fi
	;;

    clean)
	if [ "$1" = -v ]; then
	    FIND()    { find "$@" ! -type d -print 2>/dev/null; }
	    FINDDIR() { find "$@" -mindepth 1 -type d -print 2>/dev/null; }
	    shift
	else
	    FIND()    { find "$@" ! -type d -print0 2>/dev/null | \
		    PROTECT_TRASH=NO xargs -r0 rm >/dev/null 2>&1; }
	    FINDDIR() { find "$@" -mindepth 1 -type d -print0 2>/dev/null | \
		    PROTECT_TRASH=NO xargs -r0 rmdir >/dev/null 2>&1; }
	fi
	case "${1:-3}" in 1|2|3|4|5) unit=${1:-3} ;;
	    *) echo "Usage: $tpope$basename [-v] [1-5]" >&2; exit 1 ;;
	esac
	unset LD_PRELOAD
	FIND "$HOME" \( -path /media -o -path /priv \) -prune -o \( -name "*~" -o -name ".*~" -o -name ".*.sw?" -o -name .viminfo -o -name .zcompdump -o -name "*.aux" -o -name "*.blg" \) -atime +`expr $unit \* 30`
	if [ -d "$HOME/.trash" ]; then
	    FIND "$HOME/.trash" -atime +`expr $unit \* 15`
	    FIND "$HOME/.trash" -amin +`expr \( $unit - 1 \) \* 360` -size +8192k
	    FIND "$HOME/.trash" -amin +`expr \( $unit - 1 \) \* 5` -size +65536k
	    FINDDIR "$HOME/.trash" -mtime +`expr $unit \* 1` -empty
	    if [ ! -d "$HOME/.trash" ]; then
		mkdir "$HOME/.trash" && chmod 0700 "$HOME/.trash"
	    fi
	fi
	exit 0
	;;

    emerge|aptitude)
	if [ "$1" = search ]; then
	    exec "$basename" "$@"
	else
	    exec $sudo "$basename" "$@"
	fi
	;;

    launch)
	exec >/dev/null 2>&1 </dev/null
	cd
	if [ "$1" = "-d" ]; then
	    shift
	    pidof "$1" >/dev/null && exit 0
	fi
	"$@" &
	exit 0
    ;;

    logview|lv)
	[ "$PAGER" ] || PAGER=more
	# Pager should already be "less" or something is wrong
	cd /var/log
	exec $PAGER +G "$@"
	;;

    ps-grep|pg)
    if [ "`uname`" = Linux -o ! -x /usr/bin/ps ]; then
	ps uf|head -n 1
	exec ps auxf|egrep -v 'grep\>|\<pg\>'|sed -ne '2,$p'|grep "$@"
    else
	/usr/bin/ps -f|head -n 1
	exec /usr/bin/ps -ef|grep -v '\<grep\>'|sed -ne '2,$p'|grep "$@"
    fi
    ;;

    rclink|link)
	if [ "$#" -eq 0 -o "$#" -gt 4 ]; then
		echo "Usage: $tpope$basename <init-script> [ <start-levels> [ <start> [ <stop> ] ] ]"
		exit 1
	fi
	sed -ne '/# chkconfig: /s///p' "/etc/init.d/$1" \
	    2>/dev/null |read run start stop trash
	[ "$stop" ] || run=2345 start=20 stop=20
	[ -z "$2" ] || run="$2"
	[ -z "$3" ] || start="$3" stop="$3"
	[ -z "$4" ] || stop="$4"
	for i in 0 1 2 3 4 5 6; do
	    $sudo rm -f /etc/rc$i.d/[SK][0-9][0-9]"$1"
	    case $run in
		[Xx])   ;;
		*$i*) $sudo ln -s "../init.d/$1" "/etc/rc$i.d/S$start$1" ;;
		*)    $sudo ln -s "../init.d/$1" "/etc/rc$i.d/K$stop$1" ;;
	    esac
	done
	exit 0
    ;;

    runcontrol|rc)
	if [ "`expr $# % 2`" -ne 0 -o "$#" -eq 0 ]; then
		echo "Usage: $tpope$basename <action> <init-script> [ <action> <init-script> [ ... ] ]"
		exit 1
	fi
	while [ "$#" -gt 0 ]; do
	    $sudo "$rcd/$2" "$1"
	    shift 2
	done
	exit 0
    ;;

    sensible-browser|sb) exec "$HOME/bin/sensible-browser" "$@" ;;

    start|stop|restart|reload|force-reload)
	for daemon in "$@"; do
	    $sudo "$rcd/$daemon" "$basename"
	done
	[ -z "$*" -a "$basename" = stop ] && mediaaction stop && exit 0
	[ "$*" ]
	exit
    ;;

    hostinfo) exec "$HOME/bin/hostinfo" "$@" ;;
    libtrash|lt)    
	case "$LD_PRELOAD" in *libtrash*) ;; *)
	if [ -f /usr/lib/libtrash/libtrash.so -a -f "$HOME/.libtrash" ]; then
	   LD_PRELOAD="$LD_PRELOAD${LD_PRELOAD:+:}/usr/lib/libtrash/libtrash.so"
	   export LD_PRELOAD
	fi ;; esac
	"$@"
	;;
    ruptime)  exec "$HOME/bin/hostinfo" -u "$@" ;;
    rwho)     exec "$HOME/bin/hostinfo" -w "$@" ;;
    ssh)      exec "$HOME/bin/hostinfo" --ssh "$@" ;;

    install)
	[ "$1" != "--cron" ] || exec >/dev/null
	if [ ! -f "$HOME/. tpope" -o -r "$HOME/. tpope" ]; then
	    touch "$HOME/. tpope"
	    chmod 0000 "$HOME/. tpope"
	    hidden=1
	fi
	if [ ! -f "$HOME/.hushlogin" ]; then
	    touch "$HOME/.hushlogin"
	    hidden=1
	fi
	if [ ! -d "$HOME/.trash" ]; then
	    mkdir "$HOME/.trash"
	    chmod 0700 "$HOME/.trash"
	    hidden=1
	fi
	[ -z "$hidden" ] || echo "Creating hidden files."
	for dir in .firefox/default .phoenix/default .mozilla/$LOGNAME; do
	    [ -d "$HOME/$dir" ] || continue
	    subdir="`ls -1 "$HOME/$dir"|head -n 1`"
	    [ -d "$subdir" ] || continue
	    if [ ! -L "$subdir/user.js" ]; then
		ln -s ../../../.netscape/user.js "$subdir/user.js"
		links=1
	    fi
	done
	if [ ! -e "$HOME/bin/sdplay" ]; then
	    if [ -x "`which rplay 2>/dev/null`" ] && pidof rplayd >/dev/null 2>&1; then
		ln -s "`which rplay`" "$HOME/bin/sdplay"
	    elif [ -x "`which esdplay 2>/dev/null`" ] && pidof esd >/dev/null 2>&1; then
		ln -s "`which esdplay`" "$HOME/bin/sdplay"
	    elif [ -x "`which artsplay 2>/dev/null`" ] && pidof artsd >/dev/null 2>&1; then
		ln -s "`which artsplay`" "$HOME/bin/sdplay"
	    elif [ -x "`which play 2>/dev/null`" ]; then
		ln -s "`which play`" "$HOME/bin/sdplay"
	    fi
	    [ ! -L "$HOME/bin/sdplay" ] || links=1
	fi
	if [ ! -e "$HOME/.pixmaps/.localhost.xpm" ]; then
	    if [ -f "$HOME/.pixmaps/`hostname`.xpm" ]; then
		ln -s "`hostname`.xpm" "$HOME/.pixmaps/.localhost.xpm"
		links=1
	    fi
	fi
	[ -z "$links" ] || echo "Creating symlinks."
	if [ -x "`which crontab 2>/dev/null`" ]; then
	crontab -l >/tmp/crontab.original.$$ 2>/dev/null
	cron="$?"
	if [ "$cron" = 0 ]; then
	    if grep 'tpope install' /tmp/crontab.original.$$ >/dev/null; then
		sed -ne '/tpope install/,$p' /tmp/crontab.original.$$ | \
		sed -ne '2,$p' > /tmp/crontab.custom.$$
		cronmsg="Updating skeleton crontab."
	    else
		cp /tmp/crontab.original.$$ /tmp/crontab.custom.$$
		cronmsg="Inserting skeleton crontab."
	    fi
	elif [ "$cron" = 1 ]; then
	    cp /tmp/crontab.original.$$ /tmp/crontab.custom.$$
	    cronmsg="Installing skeleton crontab."
	fi
	if [ "$cron" = 0 -o "$cron" = 1 ]; then
	    shell=/bin/sh
	    env=ENV
	    if [ -x /bin/bash ]; then
		shell=/bin/bash
		env=BASH_ENV
	    fi
	    cat >/tmp/crontab.template.$$ <<EOF
# crontab for `whoami`@`hostname`
# -*- crontab -*- vim: ft=crontab
SHELL=$shell
$env=$HOME/.shrc
CLASSPATH=.:$HOME/.java:$HOME/java
PATH=$HOME/bin:/usr/local/bin:/usr/bin:/bin
PERL5LIB=$HOME/.perl5:$HOME/perl5:$HOME/.perl:$HOME/perl
RSYNC_RSH=ssh -axqoBatchMode=yes

05   4 * * *	tpope install --cron; tpope clean 5
EOF
	    cat /tmp/crontab.custom.$$ >> /tmp/crontab.template.$$
	    if ! cmp /tmp/crontab.template.$$ /tmp/crontab.original.$$ >/dev/null 2>&1; then
		echo "$cronmsg"
		crontab - < /tmp/crontab.template.$$
	    fi
	    rm /tmp/crontab.template.$$ /tmp/crontab.custom.$$
	fi
	rm /tmp/crontab.original.$$
	fi
	if [ ! -f "$HOME/.ssh/id_rsa" ]; then
	    echo "Generating ssh key."
	    ssh-keygen -t rsa -f "$HOME/.ssh/id_rsa" -N ""
	    cat "$HOME/.ssh/id_rsa.pub" >> "$HOME/.ssh/authorized_keys2"
	fi
	zsh="`grep 'zsh$' /etc/shells|head -n 1`"
	if [ -x "$zsh" ] && grep "^`whoami`:" /etc/passwd >/dev/null && \
		! grep "^`whoami`:.*zsh" /etc/passwd >/dev/null ; then
	    echo "Changing login shell."
	    chsh -s "$zsh"
	fi
    ;;

    soffice)
	if [ ! -d "$HOME/.openoffice" ]; then
	    echo "Sorry, OpenOffice.org not installed." >&2
	    exit 1
	fi
	ver=`ls "$HOME/.openoffice"|tail -1`
	exec "$HOME/.openoffice/$ver/soffice" "$@"
	;;

    media) mediaaction "$@"; exit ;;
    
    [Qq]uit|Stop|[Pp]lay|[Pp]ause|[Rr]esume|[Tt]oggle|[Nn]ext|[Pp]rev|[Ff]fwd|[Rr]ew) mediaaction "$basename" "$@"; exit ;;

    sursync|suscp)
    for arg in "$@"; do
	case "$arg" in
	    [!-]*:*) ssh -axqt "`echo $arg|sed -e 's/:.*//'`" sudo -v -p "\"%u@%h's sudo password:\"" || exit ;;
	esac
    done
    [ "$basename" = suscp ] && args=-P
    exec sudo -p "%u@%h's sudo password:" rsync $args -e "ssh -axF $HOME/.ssh/config -i $HOME/.ssh/id_rsa" --rsync-path="sudo rsync" "$@"
    ;;

    sync-tpope|sync) exec "$HOME/bin/sync-tpope" "$@" ;;

    temperature) webget="curl -m8 -s"
	[ ! -x "`which wget 2>/dev/null`" ] || webget="wget -t1 -T8 -qO -"
	temp="`$webget http://weather.noaa.gov/weather/current/${1:-KSAT}.html 2>/dev/null| grep -A 2 ' Temperature ' | tail -1 | awk '{print $3}'`"
	case "$temp" in
	    ?????*) echo "$temp" ;;
	    ????)  echo " $temp" ;;
	    ???)  echo "  $temp" ;;
	    ??)  echo "   $temp" ;;
	    *) echo " --$temp.-" ;;
	esac
	;;

    tomorrow) today --date=tomorrow "$@" ;;

    url)
	if [ "$*" = "-" ]; then
	    url="`cat`"
	else
	    url="$*"
	fi
	if [ ! -e "$url" ]; then
	case url in
	    /*|./*) ;;
	    *://*|*.*.*/*) url="`echo $url|tr -d ' \t\n\r\f'`" ;;
	    *) url="http://www.google.com/search?q=`echo $url|sed -e 's/%/%25/g' -e 's/+/%2B/g' -e 's/ /+/g' -e 's/&/%26/g' -e 's/=/%3D/g'`" ;;
	esac
	fi
    exec "$HOME/bin/sensible-browser" "$url" ;;

    vnc)
    if [ -f "$HOME/.vnc/$1" ]; then
	exec xvncviewer -passwd "$HOME/.vnc/$1" "$@"
    else
	exec xvncviewer "$@"
    fi
    exit 1
    ;;  

    word) cat /usr/share/dict/words | egrep "$@" ;;

    xauth-get) exec hostinfo --batch-ssh "$1" xauth extract - "$1:0"|xauth merge - ;;
    x-terminal-emulator|xterm) exec "$HOME/bin/x-terminal-emulator" "$@" ;;

    *) echo "$basename: unknown command." >&2 ;;
esac
